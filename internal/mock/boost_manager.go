// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/google/kube-startup-cpu-boost/internal/boost (interfaces: Manager)
//
// Generated by this command:
//
//	mockgen -package mock --copyright_file hack/boilerplate.go.txt --destination internal/mock/boost_manager.go github.com/google/kube-startup-cpu-boost/internal/boost Manager
//

package mock

import (
	context "context"
	reflect "reflect"

	boost "github.com/google/kube-startup-cpu-boost/internal/boost"
	gomock "go.uber.org/mock/gomock"
	v1 "k8s.io/api/core/v1"
	reconcile "sigs.k8s.io/controller-runtime/pkg/reconcile"
)

// MockManager is a mock of Manager interface.
type MockManager struct {
	ctrl     *gomock.Controller
	recorder *MockManagerMockRecorder
	isgomock struct{}
}

// MockManagerMockRecorder is the mock recorder for MockManager.
type MockManagerMockRecorder struct {
	mock *MockManager
}

// NewMockManager creates a new mock instance.
func NewMockManager(ctrl *gomock.Controller) *MockManager {
	mock := &MockManager{ctrl: ctrl}
	mock.recorder = &MockManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManager) EXPECT() *MockManagerMockRecorder {
	return m.recorder
}

// AddClusterBoost mocks base method.
func (m *MockManager) AddClusterBoost(ctx context.Context, boost boost.Boost) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddClusterBoost", ctx, boost)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddClusterBoost indicates an expected call of AddClusterBoost.
func (mr *MockManagerMockRecorder) AddClusterBoost(ctx, boost any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddClusterBoost", reflect.TypeOf((*MockManager)(nil).AddClusterBoost), ctx, boost)
}

// AddNamespaceBoost mocks base method.
func (m *MockManager) AddNamespaceBoost(ctx context.Context, boost boost.NamespacedBoost) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddNamespaceBoost", ctx, boost)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddNamespaceBoost indicates an expected call of AddNamespaceBoost.
func (mr *MockManagerMockRecorder) AddNamespaceBoost(ctx, boost any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNamespaceBoost", reflect.TypeOf((*MockManager)(nil).AddNamespaceBoost), ctx, boost)
}

// AddRegularBoost mocks base method.
func (m *MockManager) AddRegularBoost(ctx context.Context, boost boost.NamespacedBoost) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRegularBoost", ctx, boost)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddRegularBoost indicates an expected call of AddRegularBoost.
func (mr *MockManagerMockRecorder) AddRegularBoost(ctx, boost any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRegularBoost", reflect.TypeOf((*MockManager)(nil).AddRegularBoost), ctx, boost)
}

// DeleteClusterBoost mocks base method.
func (m *MockManager) DeleteClusterBoost(ctx context.Context, name string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteClusterBoost", ctx, name)
}

// DeleteClusterBoost indicates an expected call of DeleteClusterBoost.
func (mr *MockManagerMockRecorder) DeleteClusterBoost(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClusterBoost", reflect.TypeOf((*MockManager)(nil).DeleteClusterBoost), ctx, name)
}

// DeleteNamespaceBoost mocks base method.
func (m *MockManager) DeleteNamespaceBoost(ctx context.Context, name, namespace string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteNamespaceBoost", ctx, name, namespace)
}

// DeleteNamespaceBoost indicates an expected call of DeleteNamespaceBoost.
func (mr *MockManagerMockRecorder) DeleteNamespaceBoost(ctx, name, namespace any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNamespaceBoost", reflect.TypeOf((*MockManager)(nil).DeleteNamespaceBoost), ctx, name, namespace)
}

// DeleteRegularBoost mocks base method.
func (m *MockManager) DeleteRegularBoost(ctx context.Context, name, namespace string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteRegularBoost", ctx, name, namespace)
}

// DeleteRegularBoost indicates an expected call of DeleteRegularBoost.
func (mr *MockManagerMockRecorder) DeleteRegularBoost(ctx, name, namespace any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRegularBoost", reflect.TypeOf((*MockManager)(nil).DeleteRegularBoost), ctx, name, namespace)
}

// GetBoostForPod mocks base method.
func (m *MockManager) GetBoostForPod(ctx context.Context, pod *v1.Pod) (boost.Boost, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBoostForPod", ctx, pod)
	ret0, _ := ret[0].(boost.Boost)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetBoostForPod indicates an expected call of GetBoostForPod.
func (mr *MockManagerMockRecorder) GetBoostForPod(ctx, pod any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBoostForPod", reflect.TypeOf((*MockManager)(nil).GetBoostForPod), ctx, pod)
}

// GetClusterBoost mocks base method.
func (m *MockManager) GetClusterBoost(ctx context.Context, name string) (boost.Boost, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterBoost", ctx, name)
	ret0, _ := ret[0].(boost.Boost)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetClusterBoost indicates an expected call of GetClusterBoost.
func (mr *MockManagerMockRecorder) GetClusterBoost(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterBoost", reflect.TypeOf((*MockManager)(nil).GetClusterBoost), ctx, name)
}

// GetNamespaceBoost mocks base method.
func (m *MockManager) GetNamespaceBoost(ctx context.Context, name, namespace string) (boost.NamespacedBoost, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNamespaceBoost", ctx, name, namespace)
	ret0, _ := ret[0].(boost.NamespacedBoost)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetNamespaceBoost indicates an expected call of GetNamespaceBoost.
func (mr *MockManagerMockRecorder) GetNamespaceBoost(ctx, name, namespace any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNamespaceBoost", reflect.TypeOf((*MockManager)(nil).GetNamespaceBoost), ctx, name, namespace)
}

// GetRegularBoost mocks base method.
func (m *MockManager) GetRegularBoost(ctx context.Context, name, namespace string) (boost.NamespacedBoost, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRegularBoost", ctx, name, namespace)
	ret0, _ := ret[0].(boost.NamespacedBoost)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetRegularBoost indicates an expected call of GetRegularBoost.
func (mr *MockManagerMockRecorder) GetRegularBoost(ctx, name, namespace any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegularBoost", reflect.TypeOf((*MockManager)(nil).GetRegularBoost), ctx, name, namespace)
}

// SetBoostReconciler mocks base method.
func (m *MockManager) SetBoostReconciler(typeName string, reconciler reconcile.TypedReconciler[reconcile.Request]) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetBoostReconciler", typeName, reconciler)
}

// SetBoostReconciler indicates an expected call of SetBoostReconciler.
func (mr *MockManagerMockRecorder) SetBoostReconciler(typeName, reconciler any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBoostReconciler", reflect.TypeOf((*MockManager)(nil).SetBoostReconciler), typeName, reconciler)
}

// Start mocks base method.
func (m *MockManager) Start(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockManagerMockRecorder) Start(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockManager)(nil).Start), ctx)
}

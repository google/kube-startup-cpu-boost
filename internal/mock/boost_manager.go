// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/google/kube-startup-cpu-boost/internal/boost (interfaces: Manager)
//
// Generated by this command:
//
//	mockgen -package mock --copyright_file hack/boilerplate.go.txt --destination internal/mock/boost_manager.go github.com/google/kube-startup-cpu-boost/internal/boost Manager
//

package mock

import (
	context "context"
	reflect "reflect"

	v1alpha1 "github.com/google/kube-startup-cpu-boost/api/v1alpha1"
	boost "github.com/google/kube-startup-cpu-boost/internal/boost"
	gomock "go.uber.org/mock/gomock"
	v1 "k8s.io/api/core/v1"
	reconcile "sigs.k8s.io/controller-runtime/pkg/reconcile"
)

// MockManager is a mock of Manager interface.
type MockManager struct {
	ctrl     *gomock.Controller
	recorder *MockManagerMockRecorder
	isgomock struct{}
}

// MockManagerMockRecorder is the mock recorder for MockManager.
type MockManagerMockRecorder struct {
	mock *MockManager
}

// NewMockManager creates a new mock instance.
func NewMockManager(ctrl *gomock.Controller) *MockManager {
	mock := &MockManager{ctrl: ctrl}
	mock.recorder = &MockManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManager) EXPECT() *MockManagerMockRecorder {
	return m.recorder
}

// AddStartupCPUBoost mocks base method.
func (m *MockManager) AddStartupCPUBoost(ctx context.Context, boost boost.StartupCPUBoost) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddStartupCPUBoost", ctx, boost)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddStartupCPUBoost indicates an expected call of AddStartupCPUBoost.
func (mr *MockManagerMockRecorder) AddStartupCPUBoost(ctx, boost any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddStartupCPUBoost", reflect.TypeOf((*MockManager)(nil).AddStartupCPUBoost), ctx, boost)
}

// RemoveStartupCPUBoost mocks base method.
func (m *MockManager) RemoveStartupCPUBoost(ctx context.Context, namespace, name string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoveStartupCPUBoost", ctx, namespace, name)
}

// RemoveStartupCPUBoost indicates an expected call of RemoveStartupCPUBoost.
func (mr *MockManagerMockRecorder) RemoveStartupCPUBoost(ctx, namespace, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveStartupCPUBoost", reflect.TypeOf((*MockManager)(nil).RemoveStartupCPUBoost), ctx, namespace, name)
}

// SetStartupCPUBoostReconciler mocks base method.
func (m *MockManager) SetStartupCPUBoostReconciler(reconciler reconcile.TypedReconciler[reconcile.Request]) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetStartupCPUBoostReconciler", reconciler)
}

// SetStartupCPUBoostReconciler indicates an expected call of SetStartupCPUBoostReconciler.
func (mr *MockManagerMockRecorder) SetStartupCPUBoostReconciler(reconciler any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStartupCPUBoostReconciler", reflect.TypeOf((*MockManager)(nil).SetStartupCPUBoostReconciler), reconciler)
}

// Start mocks base method.
func (m *MockManager) Start(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockManagerMockRecorder) Start(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockManager)(nil).Start), ctx)
}

// StartupCPUBoost mocks base method.
func (m *MockManager) StartupCPUBoost(namespace, name string) (boost.StartupCPUBoost, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartupCPUBoost", namespace, name)
	ret0, _ := ret[0].(boost.StartupCPUBoost)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// StartupCPUBoost indicates an expected call of StartupCPUBoost.
func (mr *MockManagerMockRecorder) StartupCPUBoost(namespace, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartupCPUBoost", reflect.TypeOf((*MockManager)(nil).StartupCPUBoost), namespace, name)
}

// StartupCPUBoostForPod mocks base method.
func (m *MockManager) StartupCPUBoostForPod(ctx context.Context, pod *v1.Pod) (boost.StartupCPUBoost, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartupCPUBoostForPod", ctx, pod)
	ret0, _ := ret[0].(boost.StartupCPUBoost)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// StartupCPUBoostForPod indicates an expected call of StartupCPUBoostForPod.
func (mr *MockManagerMockRecorder) StartupCPUBoostForPod(ctx, pod any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartupCPUBoostForPod", reflect.TypeOf((*MockManager)(nil).StartupCPUBoostForPod), ctx, pod)
}

// UpdateStartupCPUBoost mocks base method.
func (m *MockManager) UpdateStartupCPUBoost(ctx context.Context, spec *v1alpha1.StartupCPUBoost) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStartupCPUBoost", ctx, spec)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStartupCPUBoost indicates an expected call of UpdateStartupCPUBoost.
func (mr *MockManagerMockRecorder) UpdateStartupCPUBoost(ctx, spec any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStartupCPUBoost", reflect.TypeOf((*MockManager)(nil).UpdateStartupCPUBoost), ctx, spec)
}
